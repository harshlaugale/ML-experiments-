# -*- coding: utf-8 -*-
"""expt2_211P038_harshla.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10zYpSiVoHah4um_IhHT0DWXe-Wnlupb4
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
df=pd.read_csv("./placement.csv")
plt.scatter(df["cgpa"],df["package"])
plt.xlabel("cgpa")
plt.ylabel("package")
plt.text(0.95, 0.05, '211P042', ha='right', va='bottom', fontsize=10, color='black', alpha=0.7, transform=plt.gca().transAxes)
plt.show()
x,y=df.iloc[:,0:1],df.iloc[:,-1]
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)
from sklearn.linear_model import LinearRegression
lr=LinearRegression()
lr.fit(x_train,y_train)
lr.predict(x_test)
plt.scatter(df["cgpa"],df["package"])
plt.plot(x_train,lr.predict(x_train),color="r")
plt.xlabel("cgpa")
plt.ylabel("package")
plt.show()

def plot_and_predict(cgpa):
    plt.figure(figsize=(8, 6))
    plt.scatter(df["cgpa"], df["package"], color='blue', label='Data Points')

    # Plot the regression line
    x_values = np.linspace(df["cgpa"].min(), df["cgpa"].max(), 100).reshape(-1, 1)
    y_values = lr.predict(x_values)
    plt.plot(x_values, y_values, color='red', linewidth=2, label='Regression Line')

    # Show the text
    plt.text(0.95, 0.05, 'harshla', ha='right', va='bottom', fontsize=10, color='blue', alpha=0.7,
             transform=plt.gca().transAxes)
    plt.xlabel("CGPA")
    plt.ylabel("Package")
    plt.legend()
    plt.title("CGPA vs Package")

    # Show the plot
    plt.show()
    # Predict the package for the given CGPA
    try:
        cgpa = float(cgpa)
        prediction = lr.predict(np.array([[cgpa]]))[0]
        return f"Predicted Package for CGPA {cgpa:.2f}: {prediction:.2f}"
    except ValueError:
        return "Invalid input. Please enter a valid number."
plot_and_predict(6.63)

class Model:
  def __init__(self):
    self.m=None
    self.b=None
  def fit(self,x_train,y_train):
    num=0
    den=0
    for i in range(x_train.shape[0]):
      num=num+((x_train[i]-x_train.mean())*(y_train[i]-y_train.mean()))
      den=den +((x_train[i]-x_train.mean())*(x_train[i]-x_train.mean()))
    self.m=num/den
    self.b=y_train.mean()-(self.m*x_train.mean())
    print(self.m)
    print(self.b)
  def predict(self,x_test):
    return self.m*x_test+self.b

import numpy as np
import pandas as pd
df=pd.read_csv('placement.csv')
df.head()
x=df.iloc[:,0].values
y=df.iloc[:,1].values
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=2)
lr=Model()
lr.fit(x_train,y_train)
x_train.mean()
print(lr.predict(x_test[0]))

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

df=pd.read_csv('placement.csv')
plt.scatter(df['cgpa'],df['package'])
plt.xlabel('CGPA')
plt.ylabel('Package in LPA')
x=df.iloc[:,0:1]
y=df.iloc[:,-1]
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=2)
from sklearn.linear_model import LinearRegression
lr=LinearRegression()
lr.fit(x_train,y_train)
plt.scatter(df['cgpa'],df['package'])
plt.plot(x_train,lr.predict(x_train),color='red')
plt.xlabel('CGPA')
plt.ylabel('Package in LPA')
from sklearn.metrics import mean_squared_error,mean_absolute_error,r2_score

y_pred=lr.predict(x_test)
y_test.values
print("MAE",mean_absolute_error(y_test,y_pred))
print("MSE",mean_squared_error(y_test,y_pred))
print("RMSE",np.sqrt(mean_squared_error(y_test,y_pred)))
print("R2 Score",r2_score(y_test,y_pred))
r2=r2_score(y_test,y_pred)
# Adjusted R2 Score
x_test.shape
1-((1-r2)*(40-1)/(40-1-1))
new_df1=df.copy()
new_df1['random_feature']=np.random.random(200)

new_df1=new_df1[['cgpa','random_feature','package']]
new_df1.head()
plt.scatter(new_df1['random_feature'],new_df1['package'])
plt.xlabel('random_feature')
plt.ylabel('Package in LPA')
x=new_df1.iloc[:,0:2]
y=new_df1.iloc[:,-1]
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=2)

import ipywidgets as widgets
from IPython.display import display
# Create input widgets for CGPA and random_feature
cgpa_input = widgets.FloatText(description="CGPA:")
# Create a button to trigger prediction
predict_button = widgets.Button(description="Predict")
# Define a function to handle prediction
def predict_package(button):
    cgpa = cgpa_input.value
    input_data = [[cgpa]]  # Assuming lr is your trained model
    predicted_package = lr.predict(input_data)[0]  # Get prediction from model
    print(f"\nPredicted Package: {predicted_package:.2f} LPA")
# Link the button to the prediction function
predict_button.on_click(predict_package)

# Display the widgets
display(cgpa_input,predict_button)