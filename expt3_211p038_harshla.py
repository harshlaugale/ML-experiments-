# -*- coding: utf-8 -*-
"""expt3_211P038_harshla.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iHlIENWg2OUy7dnZam2PWo0RaiGBhvZi
"""

import numpy as np
class MyLinearRegression:
    def __init__(self):
        self.coef_ = None  # To store the coefficients (beta values)
        self.intercept_ = None  # To store the intercept

    def fit(self, X, y):
        X_b = np.c_[np.ones((X.shape[0], 1)), X]  # Add bias term (intercept) as the first column

        # Normal Equation: beta = (X^T * X)^(-1) * X^T * y
        beta = np.linalg.inv(X_b.T.dot(X_b)).dot(X_b.T).dot(y)
        self.intercept_ = beta[0]  # First term is the intercept
        self.coef_ = beta[1:]      # Rest are the coefficients

    def predict(self, X):
        X_b = np.c_[np.ones((X.shape[0], 1)), X]

        return X_b.dot(np.r_[self.intercept_, self.coef_])

    def score(self, X, y):
        y_pred = self.predict(X)
        total_variance = ((y - y.mean()) ** 2).sum()
        residual_variance = ((y - y_pred) ** 2).sum()
        r2_score = 1 - (residual_variance / total_variance)
        return r2_score

if __name__ == "__main__":
    X = np.array([[1, 2], [2, 3], [4, 5], [3, 6], [7, 8]])  # Features
    y = np.array([5, 7, 10, 12, 17])  # Target

    model = MyLinearRegression()
    model.fit(X, y)

    print("Intercept:", model.intercept_)
    print("Coefficients:", model.coef_)

    X_new = np.array([[3, 4], [5, 6]])
    predictions = model.predict(X_new)
    print("Predictions:", predictions)
    r2 = model.score(X, y)
    print("R^2 score:", r2)

def plot_and_predict(x1, x2, lr, df, save_path='plot.png'):
    # Predict the y value using the regression model
    y_pred = lr.predict(pd.DataFrame({"x": [x1], "y": [x2]}))

    # Create a 3D scatter plot
    fig = plt.figure(figsize=(8, 8))
    ax = fig.add_subplot(111, projection='3d')

    # Scatter the actual data points
    ax.scatter(df['x'], df['y'], df['sum'], c='r', marker='o', label='Actual data')

    # Plot the predicted point in a different color for clarity
    ax.scatter(x1, x2, y_pred, c='b', marker='x', s=100, label='Predicted point')

    # Set the axis labels and title
    ax.set_xlabel('X1')
    ax.set_ylabel('X2')
    ax.set_zlabel('Y (Sum)')
    ax.set_title('Actual Data and Predicted Point')
    ax.legend()

    # Save the plot as an image file instead of showing it
    plt.savefig(save_path)

    # Return the predicted value
    return y_pred

# Example usage
plot_and_predict(10, 10, lr, df, save_path='prediction_plot.png')